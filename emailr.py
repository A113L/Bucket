#!/usr/bin/env python3
"""
Email-Based Hashcat Rule Extractor

This script processes a file containing email addresses. It supports two input formats:
1. Plain email address (e.g., 'user123@gmail.com')
2. Hash:Email format (e.g., '1a2b3c4d5e6f:user123@gmail.com')

It extracts trailing digit sequences from the usernames, filters them by user-specified
domains, and generates Hashcat-compatible rule strings.

Functionality:
- Reads input file supporting both plain email and 'hash:mail' formats.
- Prompts the user for the maximum number of top domains to display.
- Analyzes and displays the top domains based on the user's limit.
- Filters addresses by user-specified domain(s).
- Extracts trailing digits from the local-part.
- Groups and counts digit-domain combinations.
- Generates Hashcat rules from the most common combinations.
- Saves rules to an output file.
- **Removed: Display of the top 5 most frequent patterns.**

Usage:
Â  Â  - Run the script and provide:
Â  Â  Â  Â  1. Path to the input file containing emails/hashes (one per line).
Â  Â  Â  Â  2. Limit for the number of domains to display.
Â  Â  Â  Â  3. Comma-separated list of domains to filter.
Â  Â  Â  Â  4. Path to save the output Hashcat rules.
"""
import sys
import re
from collections import Counter, defaultdict

def get_file_path(prompt):
Â  Â  """Handles continuous prompting until a non-empty path is entered."""
Â  Â  while True:
Â  Â  Â  Â  path = input(prompt).strip()
Â  Â  Â  Â  if path:
Â  Â  Â  Â  Â  Â  return path
Â  Â  Â  Â  print("Path cannot be empty. Please try again.")

def get_integer_input(prompt, default_value=20):
Â  Â  """Handles continuous prompting until a valid integer is entered, or returns default."""
Â  Â  while True:
Â  Â  Â  Â  value = input(f"{prompt} (Default: {default_value}): ").strip()
Â  Â  Â  Â  if not value:
Â  Â  Â  Â  Â  Â  return default_value
Â  Â  Â  Â  try:
Â  Â  Â  Â  Â  Â  num = int(value)
Â  Â  Â  Â  Â  Â  if num > 0:
Â  Â  Â  Â  Â  Â  Â  Â  return num
Â  Â  Â  Â  Â  Â  print("The number must be positive. Please try again.")
Â  Â  Â  Â  except ValueError:
Â  Â  Â  Â  Â  Â  print("Invalid number. Please try again.")

def extract_data_from_email(email):
Â  Â  """
Â  Â  Extracts the local part and domain from an email.
Â  Â  Returns (digits, domain) if the local part ends in digits, otherwise None.
Â  Â  """
Â  Â  # Regex to validate email structure and separate user/domain
Â  Â  match = re.match(r'^([a-zA-Z0-9._%+-]+)@([a-zA-Z0-9.-]+\.[a-zA-Z]{2,})$', email.strip())
Â  Â  if not match:
Â  Â  Â  Â  return None
Â  Â Â 
Â  Â  user, domain = match.groups()
Â  Â  domain = domain.lower() # Normalize domain to lowercase
Â  Â Â 
Â  Â  # Check for trailing digits in the local part (username)
Â  Â  digits_match = re.search(r'(\d+)$', user)
Â  Â Â 
Â  Â  if digits_match:
Â  Â  Â  Â  digits = digits_match.group(1)
Â  Â  Â  Â  return digits, domain
Â  Â  Â  Â Â 
Â  Â  return None

def string_to_hashcat_rule(s):
Â  Â  """Converts a string (e.g., '123@gmail.com') to a Hashcat rule (e.g., '$1$2$3$@$g$m$a$i$l$.$c$o$m')."""
Â  Â  return ''.join(f"${c}" for c in s)

def print_top_domains(file_path, limit):
Â  Â  """Reads the file, counts all domains, and prints the top 'limit' domains.
Â  Â  Â  Â Now handles 'hash:mail' lines by ignoring the hash part."""
Â  Â  domain_counts = Counter()
Â  Â Â 
Â  Â  try:
Â  Â  Â  Â  with open(file_path, 'r', encoding='utf-8') as f:
Â  Â  Â  Â  Â  Â  for line in f:
Â  Â  Â  Â  Â  Â  Â  Â  line = line.strip()
Â  Â  Â  Â  Â  Â  Â  Â  if not line:
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  continue

Â  Â  Â  Â  Â  Â  Â  Â  # Handle 'hash:mail' format by splitting and taking the second part
Â  Â  Â  Â  Â  Â  Â  Â  if ':' in line and '@' in line.split(':', 1)[-1]:
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  email = line.split(':', 1)[-1]
Â  Â  Â  Â  Â  Â  Â  Â  elif '@' in line:
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  email = line
Â  Â  Â  Â  Â  Â  Â  Â  else:
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  continue

Â  Â  Â  Â  Â  Â  Â  Â  # Extract domain from the email part
Â  Â  Â  Â  Â  Â  Â  Â  if '@' in email:
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  _, domain = email.rsplit('@', 1)Â 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if domain:
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  domain_counts[domain.lower()] += 1
Â  Â  except FileNotFoundError:
Â  Â  Â  Â  print(f"\nError: File not found at '{file_path}'", file=sys.stderr)
Â  Â  Â  Â  return False
Â  Â  except Exception as e:
Â  Â  Â  Â  print(f"\nAn error occurred while reading the file: {e}", file=sys.stderr)
Â  Â  Â  Â  return False

Â  Â  top_domains_list = domain_counts.most_common(limit)
Â  Â Â 
Â  Â  print("\n" + "="*50)
Â  Â  print(f"ðŸ¥‡ Top {len(top_domains_list)} Domains Found in the Input File:")
Â  Â  print("="*50)
Â  Â  # Print the top domains comma-separated for easy copy-paste
Â  Â  print(','.join(domain for domain, count in top_domains_list))
Â  Â  print("="*50 + "\n")
Â  Â Â 
Â  Â  return True

def main():
Â  Â  """Main function to handle user input, file processing, and rule generation."""
Â  Â  print("--- Hashcat Rule Extractor for Email Patterns ---")
Â  Â Â 
Â  Â  # 1. Get Input Path
Â  Â  input_path = get_file_path("Enter path to input file containing emails (or hash:mail): ")

Â  Â  # 2. Get Domain Display Limit
Â  Â  domain_limit = get_integer_input("Enter the maximum number of top domains to display")
Â  Â Â 
Â  Â  # 3. Display Top Domains
Â  Â  if not print_top_domains(input_path, limit=domain_limit):
Â  Â  Â  Â  # Exit if file reading failed
Â  Â  Â  Â  sys.exit(1)
Â  Â  Â  Â Â 
Â  Â  # 4. Get Domains to Filter
Â  Â  domains_input = input("Enter comma-separated domains to filter (e.g., gmail.com,yahoo.com): ").strip()
Â  Â Â 
Â  Â  # 5. Get Output Path
Â  Â  output_path = get_file_path("Enter path to save generated hashcat rules: ")

Â  Â  domains_to_include = set(domain.strip().lower() for domain in domains_input.split(',') if domain.strip())
Â  Â Â 
Â  Â  if not domains_to_include:
Â  Â  Â  Â  print("\nWarning: No domains were specified for filtering. Exiting.", file=sys.stderr)
Â  Â  Â  Â  sys.exit(0)
Â  Â  Â  Â Â 
Â  Â  counter = Counter()
Â  Â  # Examples list is still needed to provide context in case the user wants to debug or verify later, 
Â  Â  # but we won't print them in the final summary.
Â  Â  examples = defaultdict(list) 

Â  Â  print("\nProcessing file...")
Â  Â Â 
Â  Â  try:
Â  Â  Â  Â  with open(input_path, 'r', encoding='utf-8') as f:
Â  Â  Â  Â  Â  Â  for line in f:
Â  Â  Â  Â  Â  Â  Â  Â  line = line.strip()
Â  Â  Â  Â  Â  Â  Â  Â  if not line:
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  continue
Â  Â  Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  Â  Â  Â  # --- LOGIC FOR HANDLING 'hash:mail' ---
Â  Â  Â  Â  Â  Â  Â  Â  if ':' in line and '@' in line.split(':', 1)[-1]:
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  # Assumes format is always 'hash:email', take the part after the first colon
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  email = line.split(':', 1)[-1]
Â  Â  Â  Â  Â  Â  Â  Â  else:
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  # Treat the whole line as a plain email
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  email = line
Â  Â  Â  Â  Â  Â  Â  Â  # --- END LOGIC ---

Â  Â  Â  Â  Â  Â  Â  Â  extracted = extract_data_from_email(email)
Â  Â  Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  Â  Â  Â  if extracted:
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  digits, domain = extracted
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if domain in domains_to_include:
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  key = (digits, domain)
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  counter[key] += 1
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  # Store a few examples for display later
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if len(examples[key]) < 3:
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  # Store the original input line (hash:mail or plain email) as the example
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  examples[key].append(line)
Â  Â  except Exception as e:
Â  Â  Â  Â  print(f"An error occurred during file processing: {e}", file=sys.stderr)
Â  Â  Â  Â  sys.exit(1)


Â  Â  sorted_items = counter.most_common()

Â  Â  # 6. Write Rules to Output File
Â  Â  try:
Â  Â  Â  Â  with open(output_path, 'w', encoding='utf-8') as out:
Â  Â  Â  Â  Â  Â  for (digits, domain), count in sorted_items:
Â  Â  Â  Â  Â  Â  Â  Â  # Rule format: '$d$i$g$i$t$s$@$d$o$m$a$i$n$.$c$o$m'
Â  Â  Â  Â  Â  Â  Â  Â  rule = string_to_hashcat_rule(digits + '@' + domain)
Â  Â  Â  Â  Â  Â  Â  Â  out.write(f"{rule}\n")
Â  Â  except Exception as e:
Â  Â  Â  Â  print(f"Error writing to output file '{output_path}': {e}", file=sys.stderr)
Â  Â  Â  Â  sys.exit(1)


Â  Â  # 7. Display Summary
Â  Â  print(f"\nDone! {len(sorted_items)} rules written to {output_path}")

Â  Â  if not sorted_items:
Â  Â  Â  Â  print("Â  No patterns found matching the specified domains and having trailing digits.")
Â  Â  Â  Â  return

if __name__ == '__main__':
Â  Â  main()
